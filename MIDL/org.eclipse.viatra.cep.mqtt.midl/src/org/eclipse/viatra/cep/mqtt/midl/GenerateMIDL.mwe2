module org.eclipse.viatra.cep.mqtt.midl.GenerateMIDL

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

//var projectName = "org.eclipse.viatra.cep.mqtt.midl"
//var projectPath = "../${projectName}"

//var fileExtensions = "midl"
//var grammarURI = "platform:/resource/${projectName}/src/org/eclipse/viatra/cep/mqtt/midl/MIDL.xtext"

//var encoding = "UTF-8"
//var lineDelimiter = "\n"
//var fileHeader = "/*\n * generated by Xtext \${version}\n */"

var rootPath = ".."

Workflow {
	
		component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.eclipse.viatra.cep.mqtt.midl"
				rootPath = rootPath
				runtimeTest = {
					enabled = false
				}
				genericIde = {
					enabled = true
					name = "org.eclipse.viatra.cep.mqtt.midl.ui"
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = false
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.viatra.cep.mqtt.midl.MIDL"
			fileExtensions = "midl"

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
		}
	}

/*	
	bean = StandaloneSetup {
		scanClassPath = true
		projectMapping = { projectName = 'org.eclipse.viatra.cep.mqtt.midl' path = '${projectPath}/../org.eclipse.viatra.cep.mqtt.midl' }
		projectMapping = { projectName = 'org.eclipse.viatra.cep.mqtt.midl.ui' path = '${projectPath}/../org.eclipse.viatra.cep.mqtt.midl.ui' }
		// The following two lines can be removed, if Xbase is not used.
		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}.ui/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}/model/generated"
	}
	
	component = XtextGenerator auto-inject {
		configuration = {
			project = WizardConfig {
				runtimeRoot = projectPath
			}
			project = StandardProjectConfig {
				baseName = projectName
				rootPath = ".."
			}
			code = auto-inject {
				preferXtendStubs = true
			}
		}
		language = auto-inject {
//			grammarUri = grammarURI
			uri = grammarURI

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}
			
	
			// generates Java API for the generated EPackages
			fragment = adapter.FragmentAdapter { 
				fragment = ecore.EMFGeneratorFragment auto-inject {
					javaModelDirectory = "/${projectName}/src-gen"
					updateBuildProperties = true
				}
			}

			fragment = adapter.FragmentAdapter {
				fragment = serializer.SerializerFragment auto-inject {
					generateStub = false
				}
			}

			// a custom ResourceFactory for use with EMF
			fragment = adapter.FragmentAdapter {
				fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
			}

			// The antlr parser generator fragment.
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 auto-inject {
			//	composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 auto-inject {}
			fragment = exporting.QualifiedNamesFragment2 auto-inject {}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
			fragment = formatting.Formatter2Fragment2 {}
			
			
			fragment = builder.BuilderIntegrationFragment2 auto-inject {}
			// labeling API
			fragment = adapter.FragmentAdapter {
				fragment = labeling.LabelProviderFragment auto-inject {}
			}
			
			// outline API
			fragment = adapter.FragmentAdapter {
				fragment = outline.OutlineTreeProviderFragment auto-inject {}
			}
			fragment = adapter.FragmentAdapter {
				fragment = outline.QuickOutlineFragment auto-inject {}
			}
			
			// quickfix API
			fragment = adapter.FragmentAdapter {
				fragment = quickfix.QuickfixProviderFragment auto-inject {}
			}
			
			// content assist API
			fragment = adapter.FragmentAdapter {
				fragment = contentAssist.ContentAssistFragment auto-inject {}
			}
			
			// provides a preference page for template proposals
			fragment = adapter.FragmentAdapter {
				fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
			}
			
			// rename refactoring
			fragment = adapter.FragmentAdapter {
				fragment = refactoring.RefactorElementNameFragment auto-inject {}
			}
			
			// provides a compare view
			fragment = adapter.FragmentAdapter {
				fragment = compare.CompareFragment auto-inject {}
			}
			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
			}
			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xtype
			fragment = xbase.XtypeGeneratorFragment2 auto-inject {}

			
		}
	}
	* 
	*/
}
